package com.natprogg.KTHchatapp.Controller;
import com.natprogg.KTHchatapp.MessageRepository;
import com.natprogg.KTHchatapp.Model.Chat;
import com.natprogg.KTHchatapp.User;
import com.natprogg.KTHchatapp.UserRepository;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.beans.factory.annotation.Autowired;
import com.natprogg.KTHchatapp.Model.Message;
import java.util.ArrayList;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
@ComponentScan("com.natprogg")
public class UserController {
    @Autowired                                  // This means to get the bean called userRepository
    private UserRepository userRepository;      // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private MessageRepository MessageRepository;
    @Autowired
    private SimpMessagingTemplate simpMessagingTemplate;
    
    @PostMapping(path="/login") // Map ONLY POST Requests
    public ModelAndView login (@RequestParam String username
        ,@RequestParam String email, @RequestParam String password) {
        //Find all users
        Iterable<User> myUsers = userRepository.findAll();
        ModelAndView modelAndView = new ModelAndView();
        boolean foundUser = false;
        //Check credentials against users in database
        for (User us: myUsers) {
            if (username.equals(us.getUsername()) && email.equals(us.getEmail()) && password.equals(us.getPassword())) {
                foundUser = true;
                break;
            }
        }
        if(foundUser) { //If login info is correct
            modelAndView.setViewName("chatroomOverview");
            System.out.println("found user");
            return modelAndView;
        }
        else { //If login info is wrong
           modelAndView.setViewName("index");
           System.out.println("login failed");
           return modelAndView;
        }
    }
    
    @PostMapping(path="/add") // Map ONLY POST Requests
    public ModelAndView addNewUser (@RequestParam String username
        ,@RequestParam String email, @RequestParam String password) {
      System.out.println("Creating a user");
        Iterable<User> myUsers = userRepository.findAll();
        ModelAndView modelAndView = new ModelAndView();
        boolean foundUser = false;
        for (User us: myUsers) {
            if (username.equals(us.getUsername()) && email.equals(us.getEmail()) && password.equals(us.getPassword())) {
                foundUser = true;
                break;
            }
        }
        if(foundUser) {
            modelAndView.setViewName("index");
            System.out.println("User already exists");
            return modelAndView;
        }
        else {
            User n = new User();
            n.setUsername(username);
            n.setEmail(email);
            n.setPassword(password);
            
            //save to database
            try {
                userRepository.save(n);
            }catch(Exception e) {
                e.printStackTrace();      
            }
           modelAndView.setViewName("chatRoomOverview");
           return modelAndView;
        }
    }
}
