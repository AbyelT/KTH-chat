package com.natprogg.KTHchatapp.Controller;
import com.natprogg.KTHchatapp.MessageRepository;
import com.natprogg.KTHchatapp.UserRepository;
import com.natprogg.KTHchatapp.Model.Chat;
import com.natprogg.KTHchatapp.User;
import com.natprogg.KTHchatapp.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.beans.factory.annotation.Autowired;
import com.natprogg.KTHchatapp.Model.Login;
import com.natprogg.KTHchatapp.Model.Message;
import java.util.List;
import java.lang.Iterable;
import java.util.ArrayList;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
@ComponentScan("com.natprogg")
public class ChatController {
    @Autowired // This means to get the bean called userRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    
    @Autowired
    private MessageRepository MessageRepository;
    @Autowired
    private SimpMessagingTemplate simpMessagingTemplate;
    
    @MessageMapping("/chat.sendMessage/{room}")
    @SendTo("/topic/{room}")
    public Chat sendMessage(@DestinationVariable String room, @Payload Chat Chat) {
        
        Message mess = new Message();
        if(Chat.getType().toString().equals("CHAT")) {
            System.out.println("Storing message in database");
            System.out.println(Chat.getContent());
            mess.setUsername(Chat.getSender());
            mess.setRoom(room);
            mess.setMessageText(Chat.getContent());
            //save to database
            try {
                MessageRepository.save(mess);
            }catch(Exception e) {
                e.printStackTrace();      
            }
        }
        else {
            System.out.println("was not chat message");
        }
        return Chat;
    }
    
//    @MessageMapping("/chat.sendMessage/{room}")
//    @SendTo("/topic/{room}")
//    public Chat leaveTheChat(@Payload Chat Chat) {
//        return Chat;
//    }
    
    @MessageMapping("/chat.sendMessage/")
    @SendTo("/topic/")
    public Chat realmessage(@Payload Chat Chat) {
        return Chat;
    }
    
    
//    @MessageMapping("/chat.addUser")
//    @SendTo("/topic/{room}")
//    public Chat addUser(@Payload Chat Chat, SimpMessageHeaderAccessor headerAccessor) {   
//        // Add username in web socket session
//        headerAccessor.getSessionAttributes().put("username", Chat.getSender());
//        return Chat;
//    }
    
    
    @MessageMapping("/chat.userJoin/{room}")
    @SendTo("/topic/{room}")
    public Chat joinChat(@DestinationVariable String room, @Payload Chat Chat, SimpMessageHeaderAccessor headerAccessor) {
        
        // Add username in web socket session
        headerAccessor.getSessionAttributes().put("username", Chat.getSender());
        headerAccessor.getSessionAttributes().put("room", room);
        
        Iterable<Message> messages = MessageRepository.findAll();
        ArrayList<Message> messagesFromRoom;
        messagesFromRoom = new ArrayList();
        for (Message mess: messages) {
            if(mess.getRoom().equals(room)) {
                messagesFromRoom.add(mess);
            }
        }
        System.out.println(messagesFromRoom.get(0).getMessageText());
        
        simpMessagingTemplate.convertAndSendToUser(Chat.getSender(), "/reply", messagesFromRoom);

//        EntityManagerFactory emf = Persistence.createEntityManagerFactory("com.natprogg_KTH-chat-app_jar_0.0.1-SNAPSHOTPU");  
//        EntityManager em=emf.createEntityManager();
//        TypedQuery<Message> query = em.createNamedQuery("Message.findByRoom", Message.class).setParameter("room", room);
//        List<Message> messages; 
//        messages = query.getResultList();
//        System.out.println(messages.get(0));
        
        
        return Chat;
    }

    @PostMapping(path="/login") // Map ONLY POST Requests
    public ModelAndView login (@RequestParam String username
        ,@RequestParam String email, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name@ResponseBody String
        // @RequestParam means it is a parameter from the GET or POST request
        Iterable<User> myUsers = userRepository.findAll();
        ModelAndView modelAndView = new ModelAndView();
        boolean foundUser = false;
        for (User us: myUsers) {
            
            if (username.equals(us.getUsername()) && email.equals(us.getEmail()) && password.equals(us.getPassword())) {
                foundUser = true;
                break;
            }
        }
        if(foundUser) {
            modelAndView.setViewName("chatroomOverview");
            System.out.println("found user");
            return modelAndView;
        }
        else {
           modelAndView.setViewName("index");
           System.out.println("login failed");
           return modelAndView;
        }
    }
    
    //@MessageMapping("/addUser")
    @PostMapping(path="/add") // Map ONLY POST Requests
    public ModelAndView addNewUser (@RequestParam String username
        ,@RequestParam String email, @RequestParam String password) {
      // @ResponseBody means the returned String is the response, not a view name@ResponseBody String
      // @RequestParam means it is a parameter from the GET or POST request
      System.out.println("Creating a user");
      User n = new User();
      n.setUsername(username);
      n.setEmail(email);
      n.setPassword(password);
      
      //save to database
      try {
          userRepository.save(n);
      }catch(Exception e) {
          e.printStackTrace();      
      }
      ModelAndView modelAndView = new ModelAndView();
      modelAndView.setViewName("chatroomOverview");
      
      return modelAndView;
    }
    
    @GetMapping(path="/chat")
    public ModelAndView joinChatRoom() {
      ModelAndView modelAndView = new ModelAndView();
      modelAndView.setViewName("chat");
      
      return modelAndView;
    }
    
//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//      // This returns a JSON or XML with the users
//      return userRepository.findAll();
//    }
    
    @MessageMapping("/chat.validateUser")
    @SendTo("/topic/public")
    public Chat validateUser(@Payload Login auth, SimpMessageHeaderAccessor headerAccessor) {   
        
        //create an entityclass User with the given parameters
        //let user sens it to external database 
        
        String testUser = "";
        String testPass = "";

        if(testUser == auth.getUserid() && testPass == auth.getPassword()) {
            
        }
        
        return null;
    }
}
