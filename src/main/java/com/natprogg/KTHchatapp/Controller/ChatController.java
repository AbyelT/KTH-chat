package com.natprogg.KTHchatapp.Controller;
import com.natprogg.KTHchatapp.MessageRepository;
import com.natprogg.KTHchatapp.Model.Chat;
import com.natprogg.KTHchatapp.User;
import com.natprogg.KTHchatapp.UserRepository;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.beans.factory.annotation.Autowired;
import com.natprogg.KTHchatapp.Model.Message;
import java.util.ArrayList;
import org.springframework.messaging.handler.annotation.DestinationVariable;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessageHeaderAccessor;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

@Controller
@ComponentScan("com.natprogg")
public class ChatController {
    @Autowired                                  // This means to get the bean called userRepository
    private UserRepository userRepository;      // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private MessageRepository MessageRepository;
    @Autowired
    private SimpMessagingTemplate simpMessagingTemplate;
    
    @MessageMapping("/chat.sendMessage/{room}")
    @SendTo("/topic/{room}")
    public Chat sendMessage(@DestinationVariable String room, @Payload Chat Chat) {
        Message mess = new Message();
        if(Chat.getType().toString().equals("CHAT")) {
            System.out.println("Storing message in database");
            mess.setUsername(Chat.getSender());
            mess.setRoom(room);
            mess.setMessageText(Chat.getContent());
            //save to database
            try {
                MessageRepository.save(mess);
            }catch(Exception e) {
                e.printStackTrace();      
            }
        }
        else {
            System.out.println("was not chat message");
        }
        return Chat;
    }
    
    @MessageMapping("/chat.userJoin/{room}")
    @SendTo("/topic/{room}")
    public Chat joinChat(@DestinationVariable String room, @Payload Chat Chat, SimpMessageHeaderAccessor headerAccessor) {
        // Add username in web socket session
        headerAccessor.getSessionAttributes().put("username", Chat.getSender());
        headerAccessor.getSessionAttributes().put("room", room);
        
        //Fetch all messages
        Iterable<Message> messages = MessageRepository.findAll();
        ArrayList<Message> messagesFromRoom;
        messagesFromRoom = new ArrayList();
        //Sorts out the ones for the appropriate room
        for (Message mess: messages) {
            if(mess.getRoom().equals(room)) {
                messagesFromRoom.add(mess);
            }
        }
        //Send messages to user.
        simpMessagingTemplate.convertAndSendToUser(Chat.getSender(), "/reply", messagesFromRoom);     
        return Chat;
    }
    
    @GetMapping(path="/chat")
    public ModelAndView joinChatRoom() {
      ModelAndView modelAndView = new ModelAndView();
      modelAndView.setViewName("chat");
      return modelAndView;
    }
    
    @GetMapping(path="/chatroomOverview")
    public ModelAndView leaveChatRoom() {
      ModelAndView modelAndView = new ModelAndView();
      modelAndView.setViewName("chatroomOverview");
      return modelAndView;
    }
}
